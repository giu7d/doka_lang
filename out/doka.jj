/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. out/doka.jj */
/*@egen*/options {
  STATIC = true;
}

PARSER_BEGIN(Doka)

public class Doka/*@bgen(jjtree)*/implements DokaTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTDokaState jjtree = new JJTDokaState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Doka parser = new Doka(System.in);

    System.out.println("------------------------");
    System.out.println("\") Doka Language ");
    System.out.println("\tv0.0.1");
    System.out.println("------------------------");
    System.out.println("\nListen for input...\n");

    while (true) {

        try{
            SimpleNode tree = parser.Main();
            tree.dump(" ");
            /**
                if (parser.Main()) {
                    System.out.println("OK");
                } else {
                    System.out.println("Bye!");
                    System.exit(0);
                }
            */

        } catch (Exception e) {
                System.out.println("NOT OK");
                System.out.println(e.getMessage());
                Doka.ReInit(System.in);
        }

    }
  }
}

PARSER_END(Doka)

SKIP : {
    " " | "\r" | "\t" | "\n"
}

/*
* TERMINALS
* */
TOKEN : {
     <MODULE: "module">
|    <EXIT: "exit">
|    <EQUAL: "=">
}

/*
* NON-TERMINALS
* */

TOKEN : {
    <UPPER_CASE_CHAR: ["A"-"Z"]>
|   <LOWER_CASE_CHAR: ["a"-"z"]>
|   <#DIGIT: ["0"-"9"]>
|   <CHAR: (<LOWER_CASE_CHAR> | <UPPER_CASE_CHAR> | "_" )>
}

TOKEN : {
    <MODULE_ID: (<UPPER_CASE_CHAR>  (<UPPER_CASE_CHAR> | <LOWER_CASE_CHAR> | <DIGIT> )*)>
|   <PATTERN_ID: (<CHAR> (<CHAR> | <DIGIT>)*)>
}



SimpleNode Main() :
{/*@bgen(jjtree) Main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    <MODULE> <MODULE_ID>
        (definePattern())*
    (<EOF>|<EXIT>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void definePattern () :
{/*@bgen(jjtree) definePattern */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) definePattern */
    try {
/*@egen*/
    (<PATTERN_ID> <EQUAL> (<UPPER_CASE_CHAR>) )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}