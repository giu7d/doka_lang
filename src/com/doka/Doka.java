/* Generated By:JJTree&JavaCC: Do not edit this line. Doka.java */
import javax.swing.*;
import java.io.*;

public class Doka/*@bgen(jjtree)*/implements DokaTreeConstants, DokaConstants {/*@bgen(jjtree)*/
  protected static JJTDokaState jjtree = new JJTDokaState();
    private static Boolean displayTree = false;

    public static void main(String args[]) throws ParseException {

        System.out.println("------------------------");
        System.out.println("\u005c") Doka Language ");
        System.out.println("\u005ctv0.0.1");
        System.out.println("------------------------\u005cn");

        if (args.length == 0) {
            System.out.println(
                "doka <params>\u005cn\u005cn" +
                "Examples:\u005cn" +
                "\u005ctdoka ./example.dk\u005ctUse path to load file\u005cn" +
                "\u005ctdoka -i\u005ct\u005ct\u005ctUse GUI to load file\u005cn" +
                "\u005ctdoka -c\u005ct\u005ct\u005ctUse interpreter mode\u005cn" +
                "\u005ctdoka -t <params>\u005ctDisplay parse tree\u005cn" +
                "\u005ctdoka -t ./example.dk\u005ctDisplay parse tree in file mode\u005cn" +
                "\u005ctdoka -t -c\u005ct\u005ctDisplay parse tree in interpreter mode\u005cn" +
                "\u005ctdoka -t -i\u005ct\u005ctDisplay parse tree in GUI mode\u005cn"
            );
            return;
        }

        try {
            for (String arg : args) {
                if (arg.equals("-t")) {
                    System.out.println(">\u005ctUsing display parse tree [-t]");
                    displayTree = true;
                } else if (arg.equals("-c")) {
                    System.out.println(">\u005ctUsing CLI interpreter [-c]");
                    parseInputStream();
                } else if (arg.equals("-i")) {
                    System.out.println(">\u005ctUsing interface [-i]");
                    String path = Doka.getFilePathFromUI();
                    parseFileStream(path);
                } else if (arg.matches("(.*).dk")) {
                    System.out.printf(">\u005ctUsing File [%s]\u005cn", arg);
                    File file = new File(arg);
                    parseFileStream(file.getAbsolutePath());
                } else {
                    System.out.println(
                        "doka <params>\u005cn\u005cn" +
                        "Examples:\u005cn" +
                        "\u005ctdoka ./example.dk\u005ctUse path to load file\u005cn" +
                        "\u005ctdoka -i\u005ct\u005ct\u005ctUse GUI to load file\u005cn" +
                        "\u005ctdoka -c\u005ct\u005ct\u005ctUse interpreter mode\u005cn" +
                        "\u005ctdoka -t <params>\u005ctDisplay parse tree\u005cn"
                    );
                }
            }
        } catch (Exception e) {
            System.out.println(":Error");
            System.out.println(e.getMessage());
        }
    }

    public static void parseFileStream(String path) {
        try {
            System.out.println(">\u005ctParsing...");
            BufferedReader fileBuffer = Doka.getFileBuffer(path);
            Doka parser = new Doka(fileBuffer);
            SimpleNode tree = parser.Main();
            showTree(tree);
        } catch (ParseException e) {
            System.out.println(">\u005ctSyntatic Error");
            System.out.println(e.getMessage());
                } catch (TokenMgrError e) {
            System.out.println(">\u005ctLexical Error");
            System.out.println(e.getMessage());
        } catch (Exception e) {
            System.out.println(">\u005ctError");
            System.out.println(e.getMessage());
        }
    }

    public static void parseInputStream() {
        Doka parser = new Doka(System.in);
        System.out.println(">\u005ctListen for input...\u005cn");

        while (true) {
            try{
                SimpleNode tree = parser.Main();
                showTree(tree);
            } catch (Exception e) {
                System.out.println(":Error");
                System.out.println(e.getMessage());
                Doka.ReInit(System.in);
            }
        }
    }

    public static void showTree(SimpleNode tree) {
        if (displayTree) {
            System.out.println(">\u005ctParse tree");
            tree.dump("\u005ct|\u005ct");
        }
    }

    public static BufferedReader getFileBuffer(String path){
        BufferedReader buffer;

        try {

            System.out.println(">\u005ctReading File");
            File file  = new File(path);
            FileReader reader = new FileReader(file);
            buffer = new BufferedReader(reader);
        } catch (IOException e) {
            buffer = null;
            System.out.println(":Error:IO:getFileBuffer");
            System.out.println(e.getMessage());
        }

        return buffer;
    }

    public static String getFilePathFromUI() {
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        String path = chooseFile.getSelectedFile().getAbsolutePath();
        System.out.println(">\u005ctLoad file: " + path);
        return path;
    }

  static final public SimpleNode Main() throws ParseException {
 /*@bgen(jjtree) Main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case EXIT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
          jj_consume_token(0);
          break;
        case EXIT:
          jj_consume_token(EXIT);
          jj_consume_token(EOL);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
        {if (true) return jjtn000;}
        break;
      case MODULE:
        jj_consume_token(MODULE);
        jj_consume_token(MODULE_ID);
        jj_consume_token(EOL);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUNCTION:
          case IO_MODULE:
          case LIST_MODULE:
          case EOL:
          case GENERIC_ID:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUNCTION:
          case IO_MODULE:
          case LIST_MODULE:
          case GENERIC_ID:
            block();
            break;
          case EOL:
            jj_consume_token(EOL);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
          jj_consume_token(0);
          break;
        case EXIT:
          jj_consume_token(EXIT);
          jj_consume_token(EOL);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
        {if (true) return jjtn000;}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

// Blocks
  static final public void block() throws ParseException {
 /*@bgen(jjtree) block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case GENERIC_ID:
        declaration_statements();
        break;
      case IO_MODULE:
      case LIST_MODULE:
        module_statements();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void functinal_declaration_block() throws ParseException {
 /*@bgen(jjtree) functinal_declaration_block */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTINAL_DECLARATION_BLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case IO_MODULE:
        case LIST_MODULE:
        case GENERIC_ID:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        block();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_3;
          }
          jj_consume_token(EOL);
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        declare_condition();
        break;
      case RETURN_ARROW:
        jj_consume_token(RETURN_ARROW);
        label_4:
        while (true) {
          return_expression();
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_5;
            }
            jj_consume_token(EOL);
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IO_MODULE:
          case LIST_MODULE:
          case PIPE:
          case START_BRACKET:
          case START_PARAM:
          case START_BLOCK:
          case GENERIC_ID:
          case NUMBER:
          case STRING:
          case BOOLEAN:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_4;
          }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// Statements
  static final public void declaration_statements() throws ParseException {
 /*@bgen(jjtree) declaration_statements */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION_STATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC_ID:
        jj_consume_token(GENERIC_ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          declare_assigment();
          break;
        case START_PARAM:
          callable_function_statements();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FUNCTION:
        declare_function();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void module_statements() throws ParseException {
 /*@bgen(jjtree) module_statements */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE_STATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIST_MODULE:
        jj_consume_token(LIST_MODULE);
        jj_consume_token(DOT);
        jj_consume_token(GENERIC_ID);
        label_6:
        while (true) {
          declare_function_params();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case START_PARAM:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_6;
          }
        }
        break;
      case IO_MODULE:
        jj_consume_token(IO_MODULE);
        jj_consume_token(DOT);
        jj_consume_token(GENERIC_ID);
        label_7:
        while (true) {
          declare_function_params();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case START_PARAM:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_7;
          }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void callable_function_statements() throws ParseException {
 /*@bgen(jjtree) callable_function_statements */
  SimpleNode jjtn000 = new SimpleNode(JJTCALLABLE_FUNCTION_STATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_8:
      while (true) {
        declare_function_params();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_PARAM:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// Declarations
  static final public void declare_assigment() throws ParseException {
 /*@bgen(jjtree) declare_assigment */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_ASSIGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASSIGN);
      label_9:
      while (true) {
        expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IO_MODULE:
        case LIST_MODULE:
        case START_BRACKET:
        case START_PARAM:
        case START_BLOCK:
        case GENERIC_ID:
        case NUMBER:
        case STRING:
        case BOOLEAN:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(EOL);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void declare_condition() throws ParseException {
 /*@bgen(jjtree) declare_condition */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_CONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      declare_conditional_params();
      jj_consume_token(START_BLOCK);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        jj_consume_token(EOL);
      }
      functinal_declaration_block();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_11;
        }
        jj_consume_token(EOL);
      }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_12;
        }
        jj_consume_token(ELSEIF);
        declare_conditional_params();
        jj_consume_token(START_BLOCK);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_13;
          }
          jj_consume_token(EOL);
        }
        functinal_declaration_block();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_14;
          }
          jj_consume_token(EOL);
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(START_BLOCK);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_15;
          }
          jj_consume_token(EOL);
        }
        functinal_declaration_block();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_16;
          }
          jj_consume_token(EOL);
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(END_BLOCK);
      jj_consume_token(EOL);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void declare_lambda_function() throws ParseException {
 /*@bgen(jjtree) declare_lambda_function */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_LAMBDA_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_BLOCK);
      declare_function_params();
      jj_consume_token(ARROW);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_17;
        }
        jj_consume_token(EOL);
      }
      return_expression();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_18;
        }
        jj_consume_token(EOL);
      }
      jj_consume_token(END_BLOCK);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void declare_function() throws ParseException {
 /*@bgen(jjtree) declare_function */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(GENERIC_ID);
      declare_function_params();
      jj_consume_token(START_BLOCK);
      label_19:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_19;
        }
      }
      functinal_declaration_block();
      jj_consume_token(END_BLOCK);
      jj_consume_token(EOL);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void declare_list() throws ParseException {
 /*@bgen(jjtree) declare_list */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_BRACKET);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IO_MODULE:
        case LIST_MODULE:
        case START_BRACKET:
        case START_PARAM:
        case START_BLOCK:
        case GENERIC_ID:
        case NUMBER:
        case STRING:
        case BOOLEAN:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_20;
        }
        list_expression();
      }
      jj_consume_token(END_BRACKET);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void declare_conditional_params() throws ParseException {
 /*@bgen(jjtree) declare_conditional_params */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_CONDITIONAL_PARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_PARAM);
      expression();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case GREATER:
        case SMALLER:
        case GREATER_OR_EQUAL:
        case SMALLER_OR_EQUAL:
        case DIFFERENT:
        case EQUAL:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_21;
        }
        logic_operator();
        expression();
      }
      jj_consume_token(END_PARAM);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void declare_function_params() throws ParseException {
 /*@bgen(jjtree) declare_function_params */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_FUNCTION_PARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_PARAM);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IO_MODULE:
        case LIST_MODULE:
        case START_BRACKET:
        case START_PARAM:
        case START_BLOCK:
        case GENERIC_ID:
        case NUMBER:
        case STRING:
        case BOOLEAN:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_22;
        }
        list_expression();
      }
      jj_consume_token(END_PARAM);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

// Expressions
  static final public void return_expression() throws ParseException {
 /*@bgen(jjtree) return_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IO_MODULE:
      case LIST_MODULE:
      case START_BRACKET:
      case START_PARAM:
      case START_BLOCK:
      case GENERIC_ID:
      case NUMBER:
      case STRING:
      case BOOLEAN:
        expression();
        break;
      case PIPE:
        jj_consume_token(PIPE);
        return_expression();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void expression() throws ParseException {
 /*@bgen(jjtree) expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_BLOCK:
        declare_lambda_function();
        break;
      case START_BRACKET:
        declare_list();
        break;
      case IO_MODULE:
      case LIST_MODULE:
        module_statements();
        break;
      case NUMBER:
        jj_consume_token(NUMBER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case SUM:
        case SUBTRACT:
        case MULTIPLY:
        case DIVIDE:
        case REST:
        case GREATER:
        case SMALLER:
        case GREATER_OR_EQUAL:
        case SMALLER_OR_EQUAL:
        case DIFFERENT:
        case EQUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUM:
          case SUBTRACT:
          case MULTIPLY:
          case DIVIDE:
          case REST:
            mathematical_expression();
            break;
          case AND:
          case OR:
          case GREATER:
          case SMALLER:
          case GREATER_OR_EQUAL:
          case SMALLER_OR_EQUAL:
          case DIFFERENT:
          case EQUAL:
            logical_expression();
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        break;
      case STRING:
      case BOOLEAN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          jj_consume_token(STRING);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case GREATER:
        case SMALLER:
        case GREATER_OR_EQUAL:
        case SMALLER_OR_EQUAL:
        case DIFFERENT:
        case EQUAL:
          logical_expression();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        break;
      case GENERIC_ID:
        jj_consume_token(GENERIC_ID);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
          case OR:
          case SUM:
          case SUBTRACT:
          case MULTIPLY:
          case DIVIDE:
          case REST:
          case GREATER:
          case SMALLER:
          case GREATER_OR_EQUAL:
          case SMALLER_OR_EQUAL:
          case DIFFERENT:
          case EQUAL:
          case START_BRACKET:
          case START_PARAM:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_23;
          }
          right_side_expression();
        }
        break;
      case START_PARAM:
        priority_expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case SUM:
        case SUBTRACT:
        case MULTIPLY:
        case DIVIDE:
        case REST:
        case GREATER:
        case SMALLER:
        case GREATER_OR_EQUAL:
        case SMALLER_OR_EQUAL:
        case DIFFERENT:
        case EQUAL:
        case START_BRACKET:
        case START_PARAM:
          right_side_expression();
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void right_side_expression() throws ParseException {
 /*@bgen(jjtree) right_side_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTRIGHT_SIDE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_BRACKET:
      case START_PARAM:
        callable_expression();
        break;
      case AND:
      case OR:
      case GREATER:
      case SMALLER:
      case GREATER_OR_EQUAL:
      case SMALLER_OR_EQUAL:
      case DIFFERENT:
      case EQUAL:
        logical_expression();
        break;
      case SUM:
      case SUBTRACT:
      case MULTIPLY:
      case DIVIDE:
      case REST:
        mathematical_expression();
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void callable_expression() throws ParseException {
 /*@bgen(jjtree) callable_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTCALLABLE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_BRACKET:
        label_24:
        while (true) {
          breckets_expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case START_BRACKET:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_24;
          }
        }
        break;
      case START_PARAM:
        callable_function_statements();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void logical_expression() throws ParseException {
 /*@bgen(jjtree) logical_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      logic_operator();
      expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void mathematical_expression() throws ParseException {
 /*@bgen(jjtree) mathematical_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTMATHEMATICAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      math_operator();
      expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void priority_expression() throws ParseException {
 /*@bgen(jjtree) priority_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIORITY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_PARAM);
      expression();
      jj_consume_token(END_PARAM);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void breckets_expression() throws ParseException {
 /*@bgen(jjtree) breckets_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTBRECKETS_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_BRACKET);
      expression();
      jj_consume_token(END_BRACKET);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void list_expression() throws ParseException {
 /*@bgen(jjtree) list_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_25;
        }
        jj_consume_token(COMMA);
        expression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// Operators
  static final public void math_operator() throws ParseException {
 /*@bgen(jjtree) math_operator */
  SimpleNode jjtn000 = new SimpleNode(JJTMATH_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
        jj_consume_token(SUM);
        break;
      case SUBTRACT:
        jj_consume_token(SUBTRACT);
        break;
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      case REST:
        jj_consume_token(REST);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void logic_operator() throws ParseException {
 /*@bgen(jjtree) logic_operator */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIC_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        break;
      case SMALLER:
        jj_consume_token(SMALLER);
        break;
      case GREATER_OR_EQUAL:
        jj_consume_token(GREATER_OR_EQUAL);
        break;
      case SMALLER_OR_EQUAL:
        jj_consume_token(SMALLER_OR_EQUAL);
        break;
      case DIFFERENT:
        jj_consume_token(DIFFERENT);
        break;
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DokaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x11,0x20000620,0x20000620,0x11,0x19,0x620,0x620,0x20000000,0x20000000,0x2000600,0x80000040,0x40000,0x20,0x0,0x0,0x600,0x0,0x600,0x20000000,0x20000000,0x100,0x20000000,0x20000000,0x20000000,0x20000000,0x80,0x20000000,0x20000000,0x20000000,0x600,0x1f81800,0x600,0x2000600,0x1fbf800,0x1fbf800,0x0,0x1f81800,0x1fbf800,0x1fbf800,0x600,0x1fbf800,0x0,0x0,0x10000000,0x3e000,0x1f81800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1000,0x1000,0x0,0x0,0x1000,0x1000,0x0,0x0,0xf02a,0x0,0x8,0x1000,0x8,0x8,0x0,0x8,0xf02a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf02a,0x0,0xf02a,0xf02a,0x0,0x0,0xc000,0x0,0xa,0xa,0xf02a,0xa,0x2,0xa,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Doka(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Doka(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DokaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Doka(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DokaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Doka(DokaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DokaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
