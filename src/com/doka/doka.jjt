options {
  STATIC = true;
}

PARSER_BEGIN(Doka)

public class Doka {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Doka parser = new Doka(System.in);

    System.out.println("------------------------");
    System.out.println("\") Doka Language ");
    System.out.println("\tv0.0.1");
    System.out.println("------------------------");
    System.out.println("\nListen for input...\n");

    while (true) {

        try{
            SimpleNode tree = parser.Main();
            tree.dump(" ");
            /**
                if (parser.Main()) {
                    System.out.println("OK");
                } else {
                    System.out.println("Bye!");
                    System.exit(0);
                }
            */

        } catch (Exception e) {
                System.out.println("NOT OK");
                System.out.println(e.getMessage());
                Doka.ReInit(System.in);
        }

    }
  }
}

PARSER_END(Doka)

SKIP : {
    " "  | "\t"
}

// Reserved Words
TOKEN : {
    <MODULE: "module">
|   <EXIT: "exit">
|   <FUNCTION: "fun">
|   <IF: "if">
|   <ELSE: "else">
|   <ELSEIF: "else if">
}

// Operators
TOKEN : {
	<SUM: "+">
|	<SUBTRACT: "-">
|	<MULTIPLY: "*">
|	<DIVIDE: "/">
|	<REST: "%">
|	<ASSING: "=">
|	<GREATER: ">" >
|	<SMALLER: "<">
|	<GREATER_OR_EQUAL: "<=" >
|	<SMALLER_OR_EQUAL: ">=" >
|	<DIFFERENT: "==!">
|	<EQUAL: "==">
|	<PIPE: "|>">
}

// Symbols
TOKEN : {
    <UNDERLINE: "_">
|   <DOT: ".">
|   <COMMA: ",">
|   <EOL: "\n" | "\r" | "\r\n" >
|   <ARROW: "=>">
|   <QUOTE: "\"">
|   <START_BRACKET: "[">
|   <END_BRACKET: "]">
|   <START_PARAM: "(">
|   <END_PARAM: ")">
|   <START_BLOCK: ":">
|   <END_BLOCK: "end">
|   <#DIGIT: ["0"-"9"]>
|   <#UPPER_CASE_CHAR: ["A"-"Z"]>
|   <#LOWER_CASE_CHAR: ["a"-"z"]>
|   <#ID_CHAR: (<LOWER_CASE_CHAR> | <UPPER_CASE_CHAR> | <UNDERLINE> )>
}

// IDs
TOKEN : {
    <MODULE_ID: (<UPPER_CASE_CHAR>(<UPPER_CASE_CHAR> | <LOWER_CASE_CHAR> | <DIGIT>)*)>
|   <GENERIC_ID: (<ID_CHAR> (<ID_CHAR> | <DIGIT>)* | (<DOT> (<ID_CHAR> | <DIGIT>)+)*)>
}

// Types
TOKEN : {
	 <NUMBER: (<DIGIT>)+( "." (<DIGIT>)+)?>
|    <STRING: (<QUOTE> (~["\""])* <QUOTE>)>
|    <BOOLEAN: ("true" | "false")>
}


SimpleNode Main() :
{}
{
    (<EOF>|<EXIT><EOL>) {
        return jjtThis;
    }
|    <MODULE> <MODULE_ID> <EOL>
        (define_module_block() | <EOL>)*
    (<EOF>|<EXIT><EOL>) {
        return jjtThis;
    }
}

// Expression

void expression():
{}
{
    LOOKAHEAD(2) math_expression()
| 	LOOKAHEAD(2) logic_expression() 
|   declare_types()
|   declare_list()
|   declare_lambda_function()
|   <GENERIC_ID> (call_function())?
}

// Definitions

void define_expression_list():
{}
{
    expression() (<COMMA> expression())*
}

void define_function_params():
{}
{
   <START_PARAM> (define_expression_list())* <END_PARAM>
}

void define_conditional_params():
{}
{
   <START_PARAM> define_expression_list() <END_PARAM>
}

void define_module_block():
{}
{
    declare_function()
|   declare_condition()
|   <GENERIC_ID> (assing_constant() | call_function())?
}

void define_function_block():
{}
{
    expression()
|   declare_condition()
|   <PIPE> define_function_block()
}

// Declarations

void declare_list():
{}
{
   <START_BRACKET> (define_expression_list())* <END_BRACKET>
}

void declare_types():
{}
{
    <NUMBER>
|   <STRING>
|   <BOOLEAN>
}

void declare_lambda_function():
{}
{
     define_function_params() <ARROW> expression()(<PIPE> expression())*
|    <START_BLOCK> define_function_params() <ARROW> (<EOL>)*
        (define_function_block() (<EOL>)*)+
     <END_BLOCK>
}

void declare_function():
{}
{
    <FUNCTION> <GENERIC_ID> define_function_params() <START_BLOCK> (<EOL>)*
        (define_function_block() (<EOL>)*)+
    <END_BLOCK> <EOL>
}

void declare_condition():
{}
{
  <IF> define_conditional_params() <START_BLOCK> (<EOL>)*
    (define_function_block() (<EOL>)*)+
  (<ELSEIF> define_conditional_params() <START_BLOCK> (<EOL>)*
    (define_function_block() (<EOL>)*)+
  )*
  (<ELSE> <START_BLOCK> (<EOL>)*
    (define_function_block() (<EOL>)*)+
  )?
  <END_BLOCK> <EOL>
}

// Etc.

void assing_constant () :
{}
{
    <ASSING> expression() <EOL>
}

void call_function () :
{}
{
    (define_function_params())+
}

void logic_expression(): { }
{
  (<NUMBER> | <GENERIC_ID>)(logic_operator()(<NUMBER> | <GENERIC_ID>))+
}

void math_expression(): { }
{
   priority_expression()
|  (<NUMBER> | <GENERIC_ID>)(math_operator()(priority_expression() |  <NUMBER> | <GENERIC_ID> ))+
}

void priority_expression(): { }
{
  <START_PARAM>math_expression()<END_PARAM>
}


void math_operator(): { }
{
	<SUM>
| <SUBTRACT>
| <MULTIPLY>
| <DIVIDE>
}

void logic_operator(): { }
{
	<GREATER>
|	<SMALLER>
|	<GREATER_OR_EQUAL>
|	<SMALLER_OR_EQUAL>
|	<DIFFERENT>
|	<EQUAL>
}









