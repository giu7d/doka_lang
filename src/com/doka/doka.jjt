options {
  STATIC = true;
}

PARSER_BEGIN(Doka)

public class Doka {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Doka parser = new Doka(System.in);

    System.out.println("------------------------");
    System.out.println("\") Doka Language ");
    System.out.println("\tv0.0.1");
    System.out.println("------------------------");
    System.out.println("\nListen for input...\n");

    while (true) {

        try{
            SimpleNode tree = parser.Main();
            tree.dump(" ");
            /**
                if (parser.Main()) {
                    System.out.println("OK");
                } else {
                    System.out.println("Bye!");
                    System.exit(0);
                }
            */

        } catch (Exception e) {
                System.out.println("NOT OK");
                System.out.println(e.getMessage());
                Doka.ReInit(System.in);
        }

    }
  }
}

PARSER_END(Doka)

SKIP : {
    " "  | "\t"
}

// Reserved Words
TOKEN : {
    <MODULE: "module">
|   <EXIT: "exit">
|   <FUNCTION: "fun">
}

// Operators
TOKEN : {
	<SUM: "+">
|	<SUBTRACT: "-">
|	<MULTIPLY: "*">
|	<DIVIDE: "/">
|	<ASSING: "=">
|	<GREATER: ">" >
|	<SMALLER: "<">
|	<GREATER_OR_EQUAL: "<=" >
|	<SMALLER_OR_EQUAL: ">=" >
|	<DIFFERENT: "==!">
|	<EQUAL: "==">
|	<PIPE: "|>">
}

// Symbols
TOKEN : {
    <UNDERLINE: "_">
|   <COMMA: ",">
|   <EOL: "\n" | "\r" | "\r\n" >
|   <ARROW: "=>">
|   <QUOTE: "\"">
|   <START_BRACKET: "[">
|   <END_BRACKET: "]">
|   <START_PARAM: "(">
|   <END_PARAM: ")">
|   <START_BLOCK: ":">
|   <END_BLOCK: "end">
|   <#DIGIT: ["0"-"9"]>
|   <UPPER_CASE_CHAR: ["A"-"Z"]>
|   <LOWER_CASE_CHAR: ["a"-"z"]>
|   <ID_CHAR: (<LOWER_CASE_CHAR> | <UPPER_CASE_CHAR> | <UNDERLINE> )>
}

// IDs
TOKEN : {
    <MODULE_ID: (<UPPER_CASE_CHAR>(<UPPER_CASE_CHAR> | <LOWER_CASE_CHAR> | <DIGIT> )+)>
|   <GENERIC_ID: (<ID_CHAR> (<ID_CHAR> | <DIGIT>)+)>
}

// Types
TOKEN : {
	 <NUMBER: (<DIGIT>)+( "." (<DIGIT>)+)?>
|    <STRING: (<QUOTE> (~["\""])* <QUOTE>)>
|    <BOOLEAN: ("true" | "false")>
}


SimpleNode Main() :
{}
{
    (<EOF>|<EXIT><EOL>) {
        return jjtThis;
    }
|    <MODULE> <MODULE_ID> <EOL>
        (module_block() | <EOL>)*
    (<EOF>|<EXIT><EOL>) {
        return jjtThis;
    }
}

void module_block():
{}
{
    declare_function()
|   <GENERIC_ID>  (assing_constant() | (declare_params())+ )
}

void function_block():
{}
{
    expression() (<PIPE> expression())*
}


void expression():
{}
{
    call_constant_or_function()
|   declare_types()
|   declare_list()
|   declare_lambda_function()
}

void generic_expression_list():
{}
{
    (expression() (<COMMA> expression())*)*
}

void declare_list():
{}
{
   <START_BRACKET> generic_expression_list() <END_BRACKET>
}
void declare_types():
{}
{
    <NUMBER>
|   <STRING>
|   <BOOLEAN>
}


void declare_params():
{}
{
   <START_PARAM> generic_expression_list() <END_PARAM>
}

void declare_lambda_function():
{}
{
    declare_params() <ARROW> function_block()
}

void declare_function():
{}
{
    <FUNCTION> <GENERIC_ID> declare_params() <START_BLOCK> (<EOL>)* (function_block() (<EOL>)*)+ <END_BLOCK> <EOL>
}

void assing_constant () :
{}
{
     <ASSING> expression() <EOL>
}

void call_constant_or_function () :
{}
{
     <GENERIC_ID> (declare_params())*
}
