/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. doka.jj */
/*@egen*/options {
  STATIC = true;
}

PARSER_BEGIN(Doka)
package parser;
import javax.swing.*;
import java.io.*;

public class Doka/*@bgen(jjtree)*/implements DokaTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTDokaState jjtree = new JJTDokaState();

/*@egen*/

    private static Boolean displayTree = false;

    public static void main(String args[]) throws ParseException {

        System.out.println("------------------------");
        System.out.println("\") Doka Language ");
        System.out.println("\tv0.0.1");
        System.out.println("------------------------\n");

        if (args.length == 0) {
            System.out.println(
                "doka <params>\n\n" +
                "Examples:\n" +
                "\tdoka ./example.dk\tUse path to load file\n" +
                "\tdoka -i\t\t\tUse GUI to load file\n" +
                "\tdoka -c\t\t\tUse interpreter mode\n" +
                "\tdoka -t <params>\tDisplay parse tree\n" +
                "\tdoka -t ./example.dk\tDisplay parse tree in file mode\n" +
                "\tdoka -t -c\t\tDisplay parse tree in interpreter mode\n" +
                "\tdoka -t -i\t\tDisplay parse tree in GUI mode\n"
            );
            return;
        }

        try {
            for (String arg : args) {
                if (arg.equals("-t")) {
                    System.out.println(">\tUsing display parse tree [-t]");
                    displayTree = true;
                } else if (arg.equals("-c")) {
                    System.out.println(">\tUsing CLI interpreter [-c]");
                    parseInputStream();
                } else if (arg.equals("-i")) {
                    System.out.println(">\tUsing interface [-i]");
                    String path = Doka.getFilePathFromUI();
                    parseFileStream(path);
                } else if (arg.matches("(.*).dk")) {
                    System.out.printf(">\tUsing File [%s]\n", arg);
                    File file = new File(arg);
                    parseFileStream(file.getAbsolutePath());
                } else {
                    System.out.println(
                        "doka <params>\n\n" +
                        "Examples:\n" +
                        "\tdoka ./example.dk\tUse path to load file\n" +
                        "\tdoka -i\t\t\tUse GUI to load file\n" +
                        "\tdoka -c\t\t\tUse interpreter mode\n" +
                        "\tdoka -t <params>\tDisplay parse tree\n"
                    );
                }
            }
        } catch (Exception e) {
            System.out.println(":Error");
            System.out.println(e.getMessage());
        }
    }

    public static void parseFileStream(String path) {
        try {
            System.out.println(">\tParsing...");
            BufferedReader fileBuffer = Doka.getFileBuffer(path);
            Doka parser = new Doka(fileBuffer);
            SimpleNode tree = parser.Main();
            showTree(tree);
        } catch (ParseException e) {
            System.out.println(">\tSyntatic Error");
            System.out.println(e.getMessage());
		} catch (TokenMgrError e) {
            System.out.println(">\tLexical Error");
            System.out.println(e.getMessage());
        } catch (Exception e) {
            System.out.println(">\tError");
            System.out.println(e.getMessage());
        }
    }

    public static void parseInputStream() {
        Doka parser = new Doka(System.in);
        System.out.println(">\tListen for input...\n");

        while (true) {
            try{
                SimpleNode tree = parser.Main();
                showTree(tree);
            } catch (Exception e) {
                System.out.println(":Error");
                System.out.println(e.getMessage());
                Doka.ReInit(System.in);
            }
        }
    }

    public static void showTree(SimpleNode tree) {
        if (displayTree) {
            System.out.println(">\tParse tree");
            tree.dump("\t|\t");
        }
    }

    public static BufferedReader getFileBuffer(String path){
        BufferedReader buffer;

        try {

            System.out.println(">\tReading File");
            File file  = new File(path);
            FileReader reader = new FileReader(file);
            buffer = new BufferedReader(reader);
        } catch (IOException e) {
            buffer = null;
            System.out.println(":Error:IO:getFileBuffer");
            System.out.println(e.getMessage());
        }

        return buffer;
    }

    public static String getFilePathFromUI() {
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        String path = chooseFile.getSelectedFile().getAbsolutePath();
        System.out.println(">\tLoad file: " + path);
        return path;
    }

}

PARSER_END(Doka)

SKIP : {
    " "  | "\t"
}

// Reserved Words
TOKEN : {
    <MODULE: "module">
|   <EXIT: "exit">
|   <FUNCTION: "fun">
|   <IF: "if">
|   <ELSE: "else">
|   <ELSEIF: "else if">
}

// Modules
TOKEN : {
    <IO_MODULE: "IO">
|   <LIST_MODULE: "List">
}

// Operators
TOKEN : {
    <AND: "&&">
|   <OR: "||" >
| 	<SUM: "+">
|	<SUBTRACT: "-">
|	<MULTIPLY: "*">
|	<DIVIDE: "/">
|	<REST: "%">
|	<ASSIGN: "=">
|	<GREATER: ">" >
|	<SMALLER: "<">
|	<GREATER_OR_EQUAL: "<=" >
|	<SMALLER_OR_EQUAL: ">=" >
|	<DIFFERENT: "!=">
|	<EQUAL: "==">
|	<PIPE: "|>">
}

// Symbols
TOKEN : {
    <UNDERLINE: "_">
|   <DOT: ".">
|   <COMMA: ",">
|   <EOL: "\n" | "\r" | "\r\n" >
|   <ARROW: "->">
|   <RETURN_ARROW: "<-">
| 	<QUOTE: "\"">
|   <START_BRACKET: "[">
|   <END_BRACKET: "]">
|   <START_PARAM: "(">
|   <END_PARAM: ")">
|   <START_BLOCK: ":">
|   <END_BLOCK: "end">
|   <#DIGIT: ["0"-"9"]>
|   <#UPPER_CASE_CHAR: ["A"-"Z"]>
|   <#LOWER_CASE_CHAR: ["a"-"z"]>
|   <#ID_CHAR: (<LOWER_CASE_CHAR> | <UPPER_CASE_CHAR> | <UNDERLINE> )>
}

// IDs
TOKEN : {
    <MODULE_ID: (<UPPER_CASE_CHAR>(<UPPER_CASE_CHAR> | <LOWER_CASE_CHAR> | <DIGIT>)*)>
|   <GENERIC_ID: (<ID_CHAR> (<ID_CHAR> | <DIGIT>)*)>
}

// Types
TOKEN : {
	 <NUMBER: (<DIGIT>)+( "." (<DIGIT>)+)?>
|    <STRING: (<QUOTE> (~["\""])* <QUOTE>)>
|    <BOOLEAN: ("true" | "false")>
}


SimpleNode Main() :
{/*@bgen(jjtree) Main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    (<EOF>|<EXIT><EOL>)/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        return jjtn000;
    }
|    <MODULE> <MODULE_ID> <EOL>
        (block() | <EOL>)*
    (<EOF>|<EXIT><EOL>)/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Blocks

void block():
{/*@bgen(jjtree) block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) block */
    try {
/*@egen*/
    declaration_statements()
|   module_statements()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Statements
void declaration_statements():
{/*@bgen(jjtree) declaration_statements */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION_STATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaration_statements */
    try {
/*@egen*/
    id() (declare_assigment() | (declare_function_params())+)
|   declare_function() | declare_condition()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void module_statements():
{/*@bgen(jjtree) module_statements */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE_STATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) module_statements */
    try {
/*@egen*/
    <LIST_MODULE><DOT>id()declare_function_params()
    | <IO_MODULE><DOT>id()module_io_params()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void module_io_params():
{/*@bgen(jjtree) module_io_params */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE_IO_PARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) module_io_params */
    try {
/*@egen*/
    <START_PARAM>
        common()(<COMMA>common())*
    <END_PARAM>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Declarations

void declare_assigment():
{/*@bgen(jjtree) declare_assigment */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_ASSIGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declare_assigment */
    try {
/*@egen*/
    <ASSIGN>
        (
            common()
            | expression()
        )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void common():
{/*@bgen(jjtree) common */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) common */
    try {
/*@egen*/
    (id() ( callable_expression() | numerical_expression()  | logical_expression())*)
        | ((number() | priority_expression()) (numerical_expression()  | logical_expression())*)
        | ((bool() | string() ) (logical_expression())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void id():
{/*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) id */
    try {
/*@egen*/
    <GENERIC_ID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void declare_condition():
{/*@bgen(jjtree) declare_condition */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_CONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declare_condition */
  try {
/*@egen*/
  <IF> declare_conditional_params() <START_BLOCK> (<EOL>)*
    (block())* <RETURN_ARROW> return_expression()(<EOL> | return_expression())*
  (<ELSEIF> declare_conditional_params() <START_BLOCK> (<EOL>)*
    (block())* <RETURN_ARROW> return_expression()(<EOL> | return_expression())*
  )*
  (<ELSE> <START_BLOCK> (<EOL>)*
    (block())* <RETURN_ARROW> return_expression()(<EOL> | return_expression())*
  )?
  <END_BLOCK><EOL>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declare_lambda_function():
{/*@bgen(jjtree) declare_lambda_function */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_LAMBDA_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declare_lambda_function */
    try {
/*@egen*/
    <START_BLOCK> declare_function_params() <ARROW>(<EOL>)*
        return_expression()(<EOL>)*
    <END_BLOCK>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void declare_function():
{/*@bgen(jjtree) declare_function */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declare_function */
    try {
/*@egen*/
    <FUNCTION> id() declare_function_params() <START_BLOCK> (<EOL>)+
        (block()(<EOL>)*)* (<RETURN_ARROW> return_expression()(<EOL> | return_expression())*)?
    <END_BLOCK>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void declare_list():
{/*@bgen(jjtree) declare_list */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declare_list */
   try {
/*@egen*/
   <START_BRACKET> (list_expression() (<COMMA> list_expression())*)? <END_BRACKET>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void declare_conditional_params():
{/*@bgen(jjtree) declare_conditional_params */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_CONDITIONAL_PARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declare_conditional_params */
  try {
/*@egen*/
  <START_PARAM>common()<END_PARAM>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declare_function_params():
{/*@bgen(jjtree) declare_function_params */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE_FUNCTION_PARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declare_function_params */
   try {
/*@egen*/
   <START_PARAM>
        (list_expression()(<COMMA> list_expression())*)?
   <END_PARAM>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

// Expressions

void return_expression():
{/*@bgen(jjtree) return_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) return_expression */
    try {
/*@egen*/
    ((id()(declare_function_params())? ) | number() )(numerical_expression()  | logical_expression())*
    |  (bool() | string()) (logical_expression())*
    | expression()
    | <PIPE> return_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void string():
{/*@bgen(jjtree) string */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}{/*@bgen(jjtree) string */
    try {
/*@egen*/
    <STRING>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void bool():
{/*@bgen(jjtree) bool */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}{/*@bgen(jjtree) bool */
    try {
/*@egen*/
    <BOOLEAN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void number():
{/*@bgen(jjtree) number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}{/*@bgen(jjtree) number */
    try {
/*@egen*/
    <NUMBER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void expression():
{/*@bgen(jjtree) expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expression */
    try {
/*@egen*/
    declare_lambda_function()
|   declare_list()
|   module_statements()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void logical_expression():
{/*@bgen(jjtree) logical_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) logical_expression */
    try {
/*@egen*/
    (	<AND>
     |	<OR>
     |   <GREATER>
     |	<SMALLER>
     |	<GREATER_OR_EQUAL>
     |	<SMALLER_OR_EQUAL>
     |	<DIFFERENT>
     |	<EQUAL> ) (number() | priority_expression() | bool() | string() | id() )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void numerical_expression():
{/*@bgen(jjtree) numerical_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERICAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/

}
{/*@bgen(jjtree) numerical_expression */
   try {
/*@egen*/
   (<SUM> | <SUBTRACT> | <MULTIPLY> | <DIVIDE> | <REST>) (number() | priority_expression() | id())/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void callable_expression():
{/*@bgen(jjtree) callable_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTCALLABLE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) callable_expression */
    try {
/*@egen*/
    breckets_expression()
|   declare_function_params()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void priority_expression():
{/*@bgen(jjtree) priority_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIORITY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) priority_expression */
    try {
/*@egen*/
    <START_PARAM>
      ( id() (callable_expression())? | number() ) ( numerical_expression()  | logical_expression())*
    <END_PARAM>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void list_expression():
{/*@bgen(jjtree) list_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) list_expression */
    try {
/*@egen*/
    ( id() (callable_expression())* | number() ) (numerical_expression())* | bool() | string()  | expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void breckets_expression():
{/*@bgen(jjtree) breckets_expression */
  SimpleNode jjtn000 = new SimpleNode(JJTBRECKETS_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) breckets_expression */
   try {
/*@egen*/
   <START_BRACKET>
        number()
   <END_BRACKET>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}