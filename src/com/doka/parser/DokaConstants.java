/* Generated By:JJTree&JavaCC: Do not edit this line. DokaConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DokaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MODULE = 3;
  /** RegularExpression Id. */
  int EXIT = 4;
  /** RegularExpression Id. */
  int FUNCTION = 5;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int ELSE = 7;
  /** RegularExpression Id. */
  int ELSEIF = 8;
  /** RegularExpression Id. */
  int IO_MODULE = 9;
  /** RegularExpression Id. */
  int LIST_MODULE = 10;
  /** RegularExpression Id. */
  int AND = 11;
  /** RegularExpression Id. */
  int OR = 12;
  /** RegularExpression Id. */
  int SUM = 13;
  /** RegularExpression Id. */
  int SUBTRACT = 14;
  /** RegularExpression Id. */
  int MULTIPLY = 15;
  /** RegularExpression Id. */
  int DIVIDE = 16;
  /** RegularExpression Id. */
  int REST = 17;
  /** RegularExpression Id. */
  int ASSIGN = 18;
  /** RegularExpression Id. */
  int GREATER = 19;
  /** RegularExpression Id. */
  int SMALLER = 20;
  /** RegularExpression Id. */
  int GREATER_OR_EQUAL = 21;
  /** RegularExpression Id. */
  int SMALLER_OR_EQUAL = 22;
  /** RegularExpression Id. */
  int DIFFERENT = 23;
  /** RegularExpression Id. */
  int EQUAL = 24;
  /** RegularExpression Id. */
  int PIPE = 25;
  /** RegularExpression Id. */
  int UNDERLINE = 26;
  /** RegularExpression Id. */
  int DOT = 27;
  /** RegularExpression Id. */
  int COMMA = 28;
  /** RegularExpression Id. */
  int EOL = 29;
  /** RegularExpression Id. */
  int ARROW = 30;
  /** RegularExpression Id. */
  int RETURN_ARROW = 31;
  /** RegularExpression Id. */
  int QUOTE = 32;
  /** RegularExpression Id. */
  int START_BRACKET = 33;
  /** RegularExpression Id. */
  int END_BRACKET = 34;
  /** RegularExpression Id. */
  int START_PARAM = 35;
  /** RegularExpression Id. */
  int END_PARAM = 36;
  /** RegularExpression Id. */
  int START_BLOCK = 37;
  /** RegularExpression Id. */
  int END_BLOCK = 38;
  /** RegularExpression Id. */
  int DIGIT = 39;
  /** RegularExpression Id. */
  int UPPER_CASE_CHAR = 40;
  /** RegularExpression Id. */
  int LOWER_CASE_CHAR = 41;
  /** RegularExpression Id. */
  int ID_CHAR = 42;
  /** RegularExpression Id. */
  int MODULE_ID = 43;
  /** RegularExpression Id. */
  int GENERIC_ID = 44;
  /** RegularExpression Id. */
  int NUMBER = 45;
  /** RegularExpression Id. */
  int STRING = 46;
  /** RegularExpression Id. */
  int BOOLEAN = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"module\"",
    "\"exit\"",
    "\"fun\"",
    "\"if\"",
    "\"else\"",
    "\"else if\"",
    "\"IO\"",
    "\"List\"",
    "\"&&\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"==\"",
    "\"|>\"",
    "\"_\"",
    "\".\"",
    "\",\"",
    "<EOL>",
    "\"->\"",
    "\"<-\"",
    "\"\\\"\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"end\"",
    "<DIGIT>",
    "<UPPER_CASE_CHAR>",
    "<LOWER_CASE_CHAR>",
    "<ID_CHAR>",
    "<MODULE_ID>",
    "<GENERIC_ID>",
    "<NUMBER>",
    "<STRING>",
    "<BOOLEAN>",
  };

}
