options {
  STATIC = true;
}

PARSER_BEGIN(Doka)
package parser;
import javax.swing.*;
import java.io.*;
import recovery.*;


public class Doka {

    private static Boolean displayTree = false;

    public static void main(String args[]) throws ParseException {

        System.out.println("------------------------");
        System.out.println("\") Doka Language ");
        System.out.println("\tv0.0.1");
        System.out.println("------------------------\n");

        if (args.length == 0) {
            System.out.println(
                "doka <params>\n\n" +
                "Examples:\n" +
                "\tdoka ./example.dk\tUse path to load file\n" +
                "\tdoka -i\t\t\tUse GUI to load file\n" +
                "\tdoka -c\t\t\tUse interpreter mode\n" +
                "\tdoka -t <params>\tDisplay parse tree\n" +
                "\tdoka -t ./example.dk\tDisplay parse tree in file mode\n" +
                "\tdoka -t -c\t\tDisplay parse tree in interpreter mode\n" +
                "\tdoka -t -i\t\tDisplay parse tree in GUI mode\n"
            );
            return;
        }

        try {
            for (String arg : args) {
                if (arg.equals("-t")) {
                    System.out.println(">\tUsing display parse tree [-t]");
                    displayTree = true;
                } else if (arg.equals("-c")) {
                    System.out.println(">\tUsing CLI interpreter [-c]");
                    parseInputStream();
                } else if (arg.equals("-i")) {
                    System.out.println(">\tUsing interface [-i]");
                    String path = Doka.getFilePathFromUI();
                    parseFileStream(path);
                } else if (arg.matches("(.*).dk")) {
                    System.out.printf(">\tUsing File [%s]\n", arg);
                    File file = new File(arg);
                    parseFileStream(file.getAbsolutePath());
                } else {
                    System.out.println(
                        "doka <params>\n\n" +
                        "Examples:\n" +
                        "\tdoka ./example.dk\tUse path to load file\n" +
                        "\tdoka -i\t\t\tUse GUI to load file\n" +
                        "\tdoka -c\t\t\tUse interpreter mode\n" +
                        "\tdoka -t <params>\tDisplay parse tree\n"
                    );
                }
            }
        } catch (Exception e) {
            System.out.println(":Error");
            System.out.println(e.getMessage());
        }
    }

    public static void parseFileStream(String path) {
        try {
            System.out.println(">\tParsing...");
            BufferedReader fileBuffer = Doka.getFileBuffer(path);
            Doka parser = new Doka(fileBuffer);
            SimpleNode tree = parser.Main();
            showTree(tree);
        } catch (ParseException e) {
            System.out.println(">\tSyntatic Error");
            System.out.println(e.getMessage());
		} catch (TokenMgrError e) {
            System.out.println(">\tLexical Error");
            System.out.println(e.getMessage());
        } catch (Exception e) {
            System.out.println(">\tError");
            System.out.println(e.getMessage());
        }
    }

    public static void parseInputStream() {
        Doka parser = new Doka(System.in);
        System.out.println(">\tListen for input...\n");

        while (true) {
            try{
                SimpleNode tree = parser.Main();
                showTree(tree);
            } catch (Exception e) {
                System.out.println(":Error");
                System.out.println(e.getMessage());
                Doka.ReInit(System.in);
            }
        }
    }

    public static void showTree(SimpleNode tree) {
        if (displayTree) {
            System.out.println(">\tParse tree");
            tree.dump("\t|\t");
        }
    }

    public static BufferedReader getFileBuffer(String path){
        BufferedReader buffer;

        try {

            System.out.println(">\tReading File");
            File file  = new File(path);
            FileReader reader = new FileReader(file);
            buffer = new BufferedReader(reader);
        } catch (IOException e) {
            buffer = null;
            System.out.println(":Error:IO:getFileBuffer");
            System.out.println(e.getMessage());
        }

        return buffer;
    }

    public static String getFilePathFromUI() {
        JFileChooser chooseFile = new JFileChooser();
        chooseFile.showOpenDialog(null);
        String path = chooseFile.getSelectedFile().getAbsolutePath();
        System.out.println(">\tLoad file: " + path);
        return path;
    }

/*public static  String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }

  static Token lastError = null;
  static boolean eof;

  static void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("*** " + met + " ***");
	System.out.println("     Conjunto de sincronização: " + g);

	if (g == null) throw e; // se o conjunto é null, propaga a exceção

	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se não chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincronização: " +
	                       im(tok.kind));
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega próximo token
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;

	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde não deveria.");
  }*/
}

PARSER_END(Doka)

SKIP : {
    " "  | "\t"
}

// Reserved Words
TOKEN : {
    <MODULE: "module">
|   <EXIT: "exit">
|   <FUNCTION: "fun">
|   <IF: "if">
|   <ELSE: "else">
|   <ELSEIF: "else if">
}

// Modules
TOKEN : {
    <IO_MODULE: "IO">
|   <LIST_MODULE: "List">
}

// Operators
TOKEN : {
    <AND: "&&">
|   <OR: "||" >
| 	<SUM: "+">
|	<SUBTRACT: "-">
|	<MULTIPLY: "*">
|	<DIVIDE: "/">
|	<REST: "%">
|	<ASSIGN: "=">
|	<GREATER: ">" >
|	<SMALLER: "<">
|	<GREATER_OR_EQUAL: "<=" >
|	<SMALLER_OR_EQUAL: ">=" >
|	<DIFFERENT: "!=">
|	<EQUAL: "==">
|	<PIPE: "|>">
}

// Symbols
TOKEN : {
    <UNDERLINE: "_">
|   <DOT: ".">
|   <COMMA: ",">
|   <EOL: "\n" | "\r" | "\r\n" >
|   <ARROW: "->">
|   <RETURN_ARROW: "<-">
| 	<QUOTE: "\"">
|   <START_BRACKET: "[">
|   <END_BRACKET: "]">
|   <START_PARAM: "(">
|   <END_PARAM: ")">
|   <START_BLOCK: ":">
|   <END_BLOCK: "end">
|   <#DIGIT: ["0"-"9"]>
|   <#UPPER_CASE_CHAR: ["A"-"Z"]>
|   <#LOWER_CASE_CHAR: ["a"-"z"]>
|   <#ID_CHAR: (<LOWER_CASE_CHAR> | <UPPER_CASE_CHAR> | <UNDERLINE> )>
}

// IDs
TOKEN : {
    <MODULE_ID: (<UPPER_CASE_CHAR>(<UPPER_CASE_CHAR> | <LOWER_CASE_CHAR> | <DIGIT>)*)>
|   <GENERIC_ID: (<ID_CHAR> (<ID_CHAR> | <DIGIT>)*)>
}

// Types
TOKEN : {
	 <NUMBER: (<DIGIT>)+( "." (<DIGIT>)+)?>
|    <STRING: (<QUOTE> (~["\""])* <QUOTE>)>
|    <BOOLEAN: ("true" | "false")>
}


SimpleNode Main() :
{}
{
    (<EOF>|<EXIT><EOL>) {
        return jjtThis;
    }
|    <MODULE> <MODULE_ID> <EOL>
        (block() | <EOL>)*
    (<EOF>|<EXIT><EOL>) {
        return jjtThis;
    }
}

// Blocks

void block():
{}
{
    declaration_statements()
|   module_statements()
}

// Statements
void declaration_statements():
{}
{
    id() (declare_assignment() | (declare_function_params())+)
|   declare_function() | declare_condition()
}

void module_statements():
{}
{
    <LIST_MODULE><DOT>id()declare_function_params()
    | <IO_MODULE><DOT>id()module_io_params()
}

void common_expressions():
{}
{
    (id() (callable_expression())* ( numerical_expression()  | logical_expression())*)
        | ((number() | priority_expression()) (numerical_expression()  | logical_expression())*)
        | ((bool() | string() ) (logical_expression())*)
}


void module_io_params():
{
}
{
    <START_PARAM>
        common_expressions() (<COMMA>common_expressions() )*
    <END_PARAM>
}

// Declarations

void declare_assignment():
{}
{
    <ASSIGN>(common_expressions()| expression())
}

void id():
{}
{
    <GENERIC_ID>
}

void functional_block():
{}
{
    (block()(<EOL>)*)* (<RETURN_ARROW> return_expression()(<EOL> | return_expression())*)?
}


void declare_condition():
{}
{
  <IF> declare_conditional_params() <START_BLOCK> (<EOL>)*
    functional_block()
  (<ELSEIF> declare_conditional_params() <START_BLOCK> (<EOL>)*
    functional_block()
  )*
  (<ELSE> <START_BLOCK> (<EOL>)*
    functional_block()
  )?
  <END_BLOCK><EOL>
}

void declare_lambda_function():
{}
{
    <START_BLOCK> declare_function_params() <ARROW>(<EOL>)*
        return_expression()(<EOL>)*
    <END_BLOCK>
}

void declare_function():
{}
{
    <FUNCTION> id() declare_function_params() <START_BLOCK> (<EOL>)+
        functional_block()
    <END_BLOCK>
}

void declare_list():
{}
{
   <START_BRACKET> (list_expression() (<COMMA> list_expression())*)? <END_BRACKET>
}

void declare_conditional_params():
{}
{
  <START_PARAM>common_expressions()<END_PARAM>
}

void declare_function_params():
{}
{
   <START_PARAM>
        (list_expression()(<COMMA> list_expression())*)?
   <END_PARAM>
}

// Expressions

void return_expression():
{}
{
    ((id()(declare_function_params())? ) | number() )(numerical_expression()  | logical_expression())*
    |  (bool() | string()) (logical_expression())*
    | expression()
    | <PIPE> return_expression()
}

void string():
{

}{
    <STRING>
}

void bool():
{
}{
    <BOOLEAN>
}

void number():
{
}{
    <NUMBER>
}



void expression():
{}
{
    declare_lambda_function()
|   declare_list()
|   module_statements()
}

void logical_expression():
{
}
{
    (	<AND>
     |	<OR>
     |   <GREATER>
     |	<SMALLER>
     |	<GREATER_OR_EQUAL>
     |	<SMALLER_OR_EQUAL>
     |	<DIFFERENT>
     |	<EQUAL> ) (number() | priority_expression() | bool() | string() | id() )
}

void numerical_expression():
{

}
{
   (<SUM> | <SUBTRACT> | <MULTIPLY> | <DIVIDE> | <REST>) (number() | priority_expression() | id())
}

void callable_expression():
{}
{
    brackets_expression()
|   declare_function_params()
}

void priority_expression():
{}
{
    <START_PARAM>
      ( id() (callable_expression())? | number() ) ( numerical_expression()  | logical_expression())*
    <END_PARAM>
}

void list_expression():
{}
{
    ( id() (callable_expression())* | number() ) (numerical_expression())* | bool() | string()  | expression()
}

void brackets_expression():
{}
{
   <START_BRACKET>
        number()
   <END_BRACKET>
}

